{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["transformDomToImage","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","domContainer","imgContainer","dataUrl","img","wrap","_context","prev","next","domtoimage","toSvg","sent","Image","src","appendChild","stop","_x","_x2","apply","this","arguments","App","_useState","useState","_useState2","slicedToArray","input","setInput","_useState3","_useState4","qrCode","setQrCode","_useState5","_useState6","hasImgLoaded","setHasImgLoaded","useEffect","document","getElementById","childNodes","length","removeChild","react_default","createElement","className","id","onLoad","lib_default","value","type","onChange","e","target","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAKMA,SAAmB,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,EAAcC,GAArB,IAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACJC,IAAWC,MAAMT,GADb,OACpBE,EADoBG,EAAAK,MAEpBP,EAAM,IAAIQ,OACZC,IAAMV,EACVD,EAAaY,YAAYV,GAJC,wBAAAE,EAAAS,SAAAf,MAAH,gBAAAgB,EAAAC,GAAA,OAAAvB,EAAAwB,MAAAC,KAAAC,YAAA,IAuEVC,MAhEf,WAAe,IAAAC,EACaC,mBAAS,IADtBC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA2B,EAAA,GACNI,EADMF,EAAA,GACCG,EADDH,EAAA,GAAAI,EAEeL,mBAAS,IAFxBM,EAAAlC,OAAA8B,EAAA,EAAA9B,CAAAiC,EAAA,GAENE,EAFMD,EAAA,GAEEE,EAFFF,EAAA,GAAAG,EAG2BT,oBAAS,GAHpCU,EAAAtC,OAAA8B,EAAA,EAAA9B,CAAAqC,EAAA,GAGNE,EAHMD,EAAA,GAGQE,EAHRF,EAAA,GAsBb,OAfAG,oBAAU,WACRT,EAAS,KACR,CAACG,IAEJM,oBAAU,WACR,GAAIF,EAAc,CAChB,IAAMjC,EAAeoC,SAASC,eAAe,iBACvCpC,EAAemC,SAASC,eAAe,mBACzCpC,EAAaqC,WAAWC,OAAS,GACnCtC,EAAauC,YAAYvC,EAAaqC,WAAW,IAEnD9C,EAAoBQ,EAAcC,KAEnC,CAACgC,EAAcJ,IAGhBY,EAAA5C,EAAA6C,cAAA,OAAKC,UAAU,OACbF,EAAA5C,EAAA6C,cAAA,OAAKC,UAAU,cACbF,EAAA5C,EAAA6C,cAAA,eACED,EAAA5C,EAAA6C,cAAA,wBAGAD,EAAA5C,EAAA6C,cAAA,OAAKE,GAAG,iBACNH,EAAA5C,EAAA6C,cAAA,WACED,EAAA5C,EAAA6C,cAAA,OACEG,OA3BI,kBAAMX,GAAgB,IA4B1BtB,IAAI,mHACJ+B,UAAU,eAGdF,EAAA5C,EAAA6C,cAACI,EAAAjD,EAAD,CAAQkD,MAAOlB,KAEjBY,EAAA5C,EAAA6C,cAAA,mCAC0Bb,EACxBY,EAAA5C,EAAA6C,cAAA,WACAD,EAAA5C,EAAA6C,cAAA,WACAD,EAAA5C,EAAA6C,cAAA,SACEM,KAAK,OACLD,MAAOtB,EACPwB,SAAU,SAAAC,GAAC,OAAIxB,EAASwB,EAAEC,OAAOJ,WAGrCN,EAAA5C,EAAA6C,cAAA,UAAQU,QAAS,kBAAMtB,EAAUL,KAAjC,SAIFgB,EAAA5C,EAAA6C,cAAA,eACED,EAAA5C,EAAA6C,cAAA,kBAGAD,EAAA5C,EAAA6C,cAAA,OAAKE,GAAG,wBCzDES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAA5C,EAAA6C,cAACkB,EAAD,MAASxB,SAASC,eAAe,SD2H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9dbdb73a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport domtoimage from 'dom-to-image';\nimport QRCode from 'qrcode.react';\nimport './App.css';\n\nconst transformDomToImage = async (domContainer, imgContainer) => {\n  const dataUrl = await domtoimage.toSvg(domContainer)\n  const img = new Image()\n  img.src = dataUrl\n  imgContainer.appendChild(img)\n}\n\nfunction App() {\n  const [input, setInput] = useState('')\n  const [qrCode, setQrCode] = useState('')\n  const [hasImgLoaded, setHasImgLoaded] = useState(false)\n\n  const onImgLoad = () => setHasImgLoaded(true)\n\n  useEffect(() => {\n    setInput('')\n  }, [qrCode])\n\n  useEffect(() => {\n    if (hasImgLoaded) {\n      const domContainer = document.getElementById('dom-container')\n      const imgContainer = document.getElementById('image-container') \n      if (imgContainer.childNodes.length > 0) {\n        imgContainer.removeChild(imgContainer.childNodes[0])\n      }\n      transformDomToImage(domContainer, imgContainer)\n    }\n  }, [hasImgLoaded, qrCode])\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <section>\n          <p>\n            DOM element\n          </p>\n          <div id=\"dom-container\">\n            <div>\n              <img\n                onLoad={onImgLoad}\n                src='https://cdn.images.express.co.uk/img/dynamic/20/590x/Bronn-Night-King-Game-of-Throne-1116816.jpg?r=1555775216958' \n                className=\"dom-image\"\n              />\n            </div>\n            <QRCode value={qrCode} />\n          </div>\n          <p>\n            Current QR Code Value: {qrCode}\n            <br />\n            <br />\n            <input \n              type=\"text\" \n              value={input} \n              onChange={e => setInput(e.target.value)}\n            />\n          </p>\n          <button onClick={() => setQrCode(input)}>\n            SAVE\n          </button>\n        </section>\n        <section>\n          <p>\n            Image\n          </p>\n          <div id=\"image-container\" />\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}